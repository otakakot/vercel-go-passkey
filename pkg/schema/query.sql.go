// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package schema

import (
	"context"

	"github.com/google/uuid"
)

const findWebAuthnCredentialByUserID = `-- name: FindWebAuthnCredentialByUserID :one
SELECT
    raw_id, user_id, credential
FROM
    webauthn_credentials
WHERE
    user_id = $1
`

func (q *Queries) FindWebAuthnCredentialByUserID(ctx context.Context, userID uuid.UUID) (WebauthnCredential, error) {
	row := q.db.QueryRow(ctx, findWebAuthnCredentialByUserID, userID)
	var i WebauthnCredential
	err := row.Scan(&i.RawID, &i.UserID, &i.Credential)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO
    users (id)
VALUES
    ($1) RETURNING id
`

func (q *Queries) InsertUser(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertUser, id)
	err := row.Scan(&id)
	return id, err
}

const insertWebAuthnCredential = `-- name: InsertWebAuthnCredential :one
INSERT INTO
    webauthn_credentials (raw_id, user_id, credential)
VALUES
    ($1, $2, $3) RETURNING raw_id, user_id, credential
`

type InsertWebAuthnCredentialParams struct {
	RawID      []byte    `json:"raw_id"`
	UserID     uuid.UUID `json:"user_id"`
	Credential []byte    `json:"credential"`
}

func (q *Queries) InsertWebAuthnCredential(ctx context.Context, arg InsertWebAuthnCredentialParams) (WebauthnCredential, error) {
	row := q.db.QueryRow(ctx, insertWebAuthnCredential, arg.RawID, arg.UserID, arg.Credential)
	var i WebauthnCredential
	err := row.Scan(&i.RawID, &i.UserID, &i.Credential)
	return i, err
}
